---

title: "Java框架-SpringCloud框架-7"
date: 2025-08-01T10:28:24+08:00
lastmod: 2025-08-01T10:28:24+08:00
categories: \["java框架"]
draft: false
tags: \[java框架]
keywords: \[java框架]
description: "Java后端从小白到大神修仙"
comment: true
toc: true
autoCollapseToc: true
contentCopyright: CC BY-NC-ND 4.0
reward: true
mathjax: false
mermaid: true
-------------

# 背景

本文是《Java 后端从小白到大神修仙》修仙系列之框架学习，Spring Cloud 微服务实战系列的 `第七篇`。Spring Cloud 是构建微服务架构的基石，拥有完整的服务治理生态，在云原生架构中广泛应用。本系列将从架构认知到实际工程，逐步构建一套企业级 Spring Cloud 微服务项目。若想详细学习请点击[首篇博文](https://yutao.org/programming/java框架-springcloud框架-1)开始，现在开始学习。

# 本篇简介

本文主题：**Micrometer Tracing 实战** —— 构建现代微服务链路追踪体系，替代已停更的 Spring Cloud Sleuth。

主要内容包括：

1. 链路追踪演进：从 Sleuth 到 Micrometer Tracing
2. Micrometer Tracing 原理与 Zipkin 可视化接入
3. Gateway + Feign 链路自动传递
4. 日志注入 TraceId / SpanId
5. 异步线程链路追踪传播

## 1. 链路追踪演进：从 Sleuth 到 Micrometer Tracing

过去我们使用 Spring Cloud Sleuth 来实现链路追踪功能，但自 2022 年起已不再维护，Spring 官方推荐使用 Micrometer Tracing 替代。

Micrometer Tracing 更加轻量、模块化，并支持多种 backend，如 Zipkin、Jaeger、OpenTelemetry，是现代云原生环境下更优的选择。

## 2. Micrometer Tracing 集成与 Zipkin 可视化

添加依赖

在所有需要链路追踪的服务中加入以下依赖：

```xml
<dependency>
  <groupId>io.micrometer</groupId>
  <artifactId>micrometer-tracing-bridge-brave</artifactId>
</dependency>
<dependency>
  <groupId>io.zipkin.reporter2</groupId>
  <artifactId>zipkin-reporter-brave</artifactId>
</dependency>
```

application.yaml 配置

```yaml
management:
  tracing:
    sampling:
      probability: 1.0  # 100%采样，生产可调整为0.1或动态配置
```

## 启动 Zipkin 服务

```bash
docker run -d -p 9411:9411 openzipkin/zipkin
```

访问：[http://localhost:9411](http://localhost:9411) 查看链路调用图谱。

# 3. Gateway + Feign 链路追踪自动传递

Micrometer Tracing 与 Spring Cloud Gateway、OpenFeign 自动集成：

* Gateway：生成 traceId，传递至下游服务
* Feign：自动携带上下文，无需手动注入

无需额外配置，只需在 gateway-service、user-service、task-service 中接入依赖和配置即可。

# 4. 日志注入 TraceId / SpanId

通过日志 MDC 机制，自动注入链路 ID 信息：

```yaml
logging:
  pattern:
    level: "%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]"
```

输出示例：

```
INFO [gateway-service,9fabc1234,3bcd4567] 请求进入网关
```

方便结合 ELK、SkyWalking 等日志分析系统进行统一追踪。

# 5. 异步线程上下文传播支持

Micrometer Tracing 支持异步传播：

```java
@Async
public CompletableFuture<Void> runAsync() {
    log.info("异步调用，依旧包含TraceId");
    return CompletableFuture.completedFuture(null);
}
```

无需额外操作，自动传递上下文信息。

# 6. 相关微服务说明

当前已创建微服务：

* config-service
* gateway-service
* user-api

本篇不新建服务，仅在后续博文中创建：

* user-service
* task-service

请确保上述服务均添加了 tracing 相关依赖和配置，确保链路打通。

---

至此，我们已完成对 Micrometer Tracing 链路追踪体系的构建，为后续的分布式日志、调用链分析、性能定位等打下基础。
